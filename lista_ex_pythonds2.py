# -*- coding: utf-8 -*-
"""Lista_ex_PythonDS2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hhHVkGBcVuaOFZGWI0-ecpu0Oo9Jeoes

1. Classe Bola: Crie uma classe que modele uma bola:
a. Atributos: Cor, circunferência, material
b. Métodos: trocaCor e mostraCor
"""

class Bola():
    def __init__(self, cor, crc, material):
        self.cor = cor
        self.crc = crc
        self.material = material

    def getcor(self):
        novacor = input("informe a cor da bola : ")
        self.cor = novacor
        return self.cor

    def mostracor(self):
        return self.cor

    def material(pypy):
        return pypy.material

Bola1 = Bola('azul', 10, 'plastico')
print("a cor da bola é : ", Bola1.mostracor())
print("a nova cor da bola é : ", Bola1.getcor())
print(Bola1.material)

"""2. Classe Quadrado: Crie uma classe que modele um quadrado:
a. Atributos: Tamanho do lado
b. Métodos: Mudar valor do Lado, Retornar valor do Lado e calcular Área;
"""

class Quadrado:
    def __init__(self, tamanho):
        self.tamanho = tamanho

    def mudar_valor_do_lado(self, novo_tamanho):
        self.tamanho = novo_tamanho

    def retornar_valor_do_lado(self):
        return self.tamanho

    def calcular_area(self):
        return self.tamanho ** 2

"""3. Classe Retângulo: Crie uma classe que modele um retângulo:
a. Atributos: LadoA, LadoB (ou Comprimento e Largura, ou Base e Altura,
a escolher)
b. Métodos: Mudar valor dos lados, Retornar valor dos lados, calcular Área
e calcular Perímetro;
c. Crie um programa que utilize esta classe. Ele deve pedir ao usuário que
informe as medidas de um local. Depois, deve criar um objeto com as
medidas e calcular a quantidade de pisos e de rodapés necessárias para
o local.
"""

class Retangulo:
    def __init__(self, lado_a, lado_b):
        self.lado_a = lado_a
        self.lado_b = lado_b

    def mudar_valor_dos_lados(self, novo_lado_a, novo_lado_b):
        self.lado_a = novo_lado_a
        self.lado_b = novo_lado_b

    def retornar_valor_dos_lados(self):
        return self.lado_a, self.lado_b

    def calcular_area(self):
        return self.lado_a * self.lado_b

    def calcular_perimetro(self):
        return 2 * (self.lado_a + self.lado_b)

# Pedir ao usuário que informe as medidas do local
lado_a = float(input('Informe o comprimento do local: '))
lado_b = float(input('Informe a largura do local: '))

# Criar um objeto da classe Retângulo com as medidas do local
local = Retangulo(lado_a, lado_b)

# Calcular a área e o perímetro do local
area = local.calcular_area()
perimetro = local.calcular_perimetro()

# Calcular a quantidade de pisos e de rodapés necessários
pisos = int(area / 10)
rodaps = int(perimetro / 2)

# Mostrar os resultados
print(f'A área do local é {area:.2f} m²')
print(f'O perímetro do local é {perimetro:.2f} m')
print(f' São necessários {pisos} pisos e {rodaps} rodapés para o local.')

"""4. Classe Pessoa: Crie uma classe que modele uma pessoa:
a. Atributos: nome, idade, peso e altura
b. Métodos: Envelhecer, engordar, emagrecer, crescer. Obs: Por padrão,
a cada ano que nossa pessoa envelhece, sendo a idade dela menor que
21 anos, ela deve crescer 0,5 cm.
"""

class Pessoa:
    def __init__(self, nome, idade, peso, altura):
        self.nome = nome
        self.idade = idade
        self.peso = peso
        self.altura = altura

    def envelhecer(self):
        self.idade += 1
        if self.idade < 21:
            self.altura += 0.5

    def engordar(self, peso_adicional):
        self.peso += peso_adicional

    def emagrecer(self, peso_reducao):
        self.peso -= peso_reducao

    def crescer(self, altura_adicional):
        self.altura += altura_adicional

"""5. Classe Conta Corrente: Crie uma classe para implementar uma conta
corrente. A classe deve possuir os seguintes atributos: número da conta, nome
do correntista e saldo. Os métodos são os seguintes: alterarNome, depósito e
saque; No construtor, saldo é opcional, com valor default zero e os demais
atributos são obrigatórios.
"""

class ContaCorrente:
    def __init__(self, numero, nome, saldo=0):
        self.numero = numero
        self.nome = nome
        self.saldo = saldo

    def alterar_nome(self, novo_nome):
        self.nome = novo_nome

    def deposito(self, valor):
        self.saldo += valor

    def saque(self, valor):
        self.saldo -= valor

"""6. Classe TV: Faça um programa que simule um televisor criando-o como um
objeto. O usuário deve ser capaz de informar o número do canal e aumentar ou
diminuir o volume. Certifique-se de que o número do canal e o nível do volume
permanecem dentro de faixas válidas.
"""

class TV:
    def __init__(self, channel, volume, previous_volume):
        self.channel = channel
        self.volume = volume
        self.previous_volume = previous_volume

    def set_channel(self, channel):
        if 0 <= channel <= 100:
            self.channel = channel
        else:
            print("Canal inválido.")

    def increase_volume(self, volume):
        if self.volume + volume <= 100:
            self.volume += volume
        else:
            print("Volume máximo atingido.")

    def decrease_volume(self, volume):
        if self.volume - volume >= 0:
            self.volume -= volume
        else:
            print("Volume mínimo atingido.")

    def mute(self):
        if self.volume > 0:
            self.previous_volume = self.volume
            self.volume = 0
        else:
            self.volume = self.previous_volume

# teste da classe
tv = TV(0, 50, 50)
while True:
    print("Escolha uma opção:")
    print("1. Mudar de canal")
    print("2. Aumentar volume")
    print("3. Diminuir volume")
    print("4. Mute")
    print("5. Sair")
    escolha = input("Sua escolha: ")

    if escolha == "1":
        canal = int(input("Insira o número do canal: "))
        tv.set_channel(canal)
        print("Canal atual:", tv.channel)
    elif escolha == "2":
        volume = int(input("Insira o número de unidades a aumentar o volume: "))
        tv.increase_volume(volume)
        print("Volume atual:", tv.volume)
    elif escolha == "3":
        volume = int(input("Insira o número de unidades a diminuir o volume: "))
        tv.decrease_volume(volume)
        print("Volume atual:", tv.volume)
    elif escolha == "4":
        tv.mute()
        print("Volume atual:", tv.volume)
    elif escolha == "5":
        break
    else:
        print("Opção inválida, tente novamente.")

"""7. Classe Bichinho Virtual: Crie uma classe que modele um Tamagushi (Bichinho
Eletrônico):
a. Atributos: Nome, Fome, Saúde e Idade b. Métodos: Alterar Nome, Fome,
Saúde e Idade; Retornar Nome, Fome, Saúde e Idade

Obs: Existe mais uma informação que devemos levar em consideração, o Humor
do nosso tamagushi, este humor é uma combinação entre os atributos Fome e
Saúde, ou seja, um campo calculado, então não devemos criar um atributo para
armazenar esta informação por que ela pode ser calculada a qualquer momento.
"""

class BichinhoVirtual:
    def __init__(self, nome, fome, saude, idade):
        self.nome = nome
        self.fome = fome
        self.saude = saude
        self.idade = idade

    def alterar_nome(self, novo_nome):
        self.nome = novo_nome

    def alterar_fome(self, nova_fome):
        self.fome = nova_fome

    def alterar_saude(self, nova_saude):
        self.saude = nova_saude

    def alterar_idade(self, nova_idade):
        self.idade = nova_idade

    def get_nome(self):
        return self.nome

    def get_fome(self):
        return self.fome

    def get_saude(self):
        return self.saude

    def get_idade(self):
        return self.idade

    def calcular_humor(self):
        return self.fome + self.saude

bichinho = BichinhoVirtual("Tamagushi", 50, 75, 10)
print(bichinho.get_nome())  # Imprime "Tamagushi"
print(bichinho.get_fome())  # Imprime 50
print(bichinho.get_saude())  # Imprime 75
print(bichinho.get_idade())  # Imprime 10

bichinho.alterar_nome("Tamagushi Jr.")
print(bichinho.get_nome())  # Imprime "Tamagushi Jr."

bichinho.alterar_fome(25)
print(bichinho.get_fome())  # Imprime 25

bichinho.alterar_saude(50)
print(bichinho.get_saude())  # Imprime 50

bichinho.alterar_idade(15)
print(bichinho.get_idade())  # Imprime 15

print(bichinho.calcular_humor())  # Imprime 125 (50 + 75)

"""8. Classe Macaco: Desenvolva uma classe Macaco,que possua os atributos
nome e bucho (estomago) e pelo menos os métodos comer(), verBucho() e
digerir(). Faça um programa ou teste interativamente, criando pelo menos dois
macacos, alimentando-os com pelo menos 3 alimentos diferentes e verificando
o conteúdo do estomago a cada refeição.
Experimente fazer com que um macaco coma o outro. É possível criar um
macaco canibal?
"""

class Macaco:
    def __init__(self, nome):
        self.nome = nome
        self.estomago = []

    def comer(self, alimento):
        self.estomago.append(alimento)
        print(f"{self.nome} comeu {alimento}.")

    def verEstomago(self):
        print(f"O estômago de {self.nome} contém: {self.estomago}")

    def digerir(self):
        if len(self.estomago) > 0:
            self.estomago.pop(0)
            print(f"{self.nome} digeriu o alimento.")
        else:
            print(f"{self.nome} não tem comida para digerir.")

def alimentar_macaco(macaco):
    lanche = input("Qual é o café da manhã? ")
    macaco.comer(lanche)
    almoco = input("O que tem para o almoço? ")
    macaco.comer(almoco)
    janta = input("O que tem para o jantar? ")
    macaco.comer(janta)

try:
    nome_macaco1 = input("Insira o nome do primeiro macaco: ")
    nome_macaco2 = input("Insira o nome do segundo macaco: ")
    macaco1 = Macaco(nome_macaco1)
    macaco2 = Macaco(nome_macaco2)

    while True:
        print("Escolha um macaco para alimentar:")
        print("1.", macaco1.nome)
        print("2.", macaco2.nome)
        print("3. Ver estômago")
        print("4. Digerir alimento")
        print("5. Sair")
        escolha = input("Sua escolha: ")

        if escolha == "1":
            alimentar_macaco(macaco1)
        elif escolha == "2":
            alimentar_macaco(macaco2)
        elif escolha == "3":
            macaco1.verEstomago()
            macaco2.verEstomago()
        elif escolha == "4":
            macaco1.digerir()
            macaco2.digerir()
        elif escolha == "5":
            break

        else:
            print("Escolha inválida, tente novamente.")
except ValueError:
    print("Entrada inválida, por favor insira um número válido.")

"""9. Classe Ponto e Retângulo: Faça um programa completo utilizando funções e
classes que:
a. Possua uma classe chamada Ponto, com os atributos x e y.
b. Possua uma classe chamada Retângulo, com os atributos largura e
altura.
c. Possua uma função para imprimir os valores da classe Ponto
d. Possua uma função para encontrar o centro de um Retângulo.
e. Você deve criar alguns objetos da classe Retângulo.
f. Cada objeto deve ter um vértice de partida, por exemplo, o vértice
inferior esquerdo do retângulo, que deve ser um objeto da classe Ponto.
g. A função para encontrar o centro do retângulo deve retornar o valor
para um objeto do tipo ponto que indique os valores de x e y para o centro
do objeto.
h. O valor do centro do objeto deve ser mostrado na tela
i. Crie um menu para alterar os valores do retângulo e imprimir o centro
deste retângulo.
"""

class Ponto:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return f"Ponto({self.x}, {self.y})"

class Retangulo:
    def __init__(self, largura, altura, vetor_inicial):
        self.largura = largura
        self.altura = altura
        self.vetor_inicial = vetor_inicial

    def centro(self):
        return Ponto((self.largura / 2), (self.altura / 2))

    def __str__(self):
        return f"Retângulo({self.largura}, {self.altura})"

def imprimir_ponto(ponto):
    print(f"Valores do ponto: {ponto.x}, {ponto.y}")

def imprimir_retangulo(retangulo):
    print(f"Valores do retângulo: {retangulo.largura}, {retangulo.altura}")
    print(f"Centro do retângulo: {retangulo.centro().x}, {retangulo.centro().y}")

# Criar objetos
ponto1 = Ponto(1, 2)
ponto2 = Ponto(3, 4)
retangulo1 = Retangulo(5, 6, ponto1)
retangulo2 = Retangulo(7, 8, ponto2)

# Imprimir valores
imprimir_ponto(ponto1)
imprimir_ponto(ponto2)
imprimir_retangulo(retangulo1)
imprimir_retangulo(retangulo2)

# Alterar valores
largura = input("Entre com a largura do retângulo: ")
altura = input("Entre com a altura do retângulo: ")
vetor_inicial = input("Entre com o vetor inicial do retângulo: ")

retangulo1.largura = largura
retangulo1.altura = altura
retangulo1.vetor_inicial = vetor_inicial

retangulo2.largura = largura
retangulo2.altura = altura
retangulo2.vetor_inicial = vetor_inicial

# Imprimir valores novamente
imprimir_retangulo(retangulo1)
imprimir_retangulo(retangulo2)

"""10. Classe Bomba de Combustível: Faça um programa completo utilizando
classes e métodos que:
a. Possua uma classe chamada bombaCombustível, com no mínimo
esses atributos:
i. tipoCombustivel.
ii. valorLitro
iii. quantidadeCombustivel
b. Possua no mínimo esses métodos:

i. abastecerPorValor( ) – método onde é informado o valor a ser
abastecido e mostra a quantidade de litros que foi colocada no
veículo
ii. abastecerPorLitro( ) – método onde é informado a quantidade em
litros de combustível e mostra o valor a ser pago pelo cliente.
iii. alterarValor( ) – altera o valor do litro do combustível.
iv. alterarCombustivel( ) – altera o tipo do combustível.
v. alterarQuantidadeCombustivel( ) – altera a quantidade de
combustível restante na bomba.

OBS: Sempre que acontecer um abastecimento é necessário atualizar a
quantidade de combustível total na bomba
"""

class BombaCombustivel:
    def __init__(self, tipoCombustivel, valorLitro, quantidadeCombustivel):
        self.tipoCombustivel = tipoCombustivel
        self.valorLitro = valorLitro
        self.quantidadeCombustivel = quantidadeCombustivel

    def abastecerPorValor(self, valor):
        quantidade = round(valor / self.valorLitro)
        self.quantidadeCombustivel -= quantidade
        print(f"Abasteceu {quantidade} litros de {self.tipoCombustivel} por R${valor}")

    def abastecerPorLitro(self, litros):
        valor = litros * self.valorLitro
        self.quantidadeCombustivel -= litros
        print(f"Abasteceu {litros} litros de {self.tipoCombustivel} por R${valor}")

    def alterarValor(self, novoValor):
        self.valorLitro = novoValor

    def alterarCombustivel(self, novoCombustivel):
        self.tipoCombustivel = novoCombustivel

    def alterarQuantidadeCombustivel(self, novaQuantidade):
        self.quantidadeCombustivel = novaQuantidade

# Criar uma instância da classe BombaCombustivel
bomba = BombaCombustivel("Gasolina", 4.5, 50)

# Abastecer por valor
bomba.abastecerPorValor(100)

# Abastecer por litro
bomba.abastecerPorLitro(20)

# Alterar valor
bomba.alterarValor(4.2)

# Alterar combustível
bomba.alterarCombustivel("Diesel")

# Alterar quantidade de combustível
bomba.alterarQuantidadeCombustivel(30)

# Mostrar quantidade de combustível restante
print(f"Quantidade de combustível restante: {bomba.quantidadeCombustivel} litros")